{"version":3,"sources":["webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.module.ts"],"names":["LoginComponent","config","router","activatedRoute","authService","commonService","fBuilder","dataService","formErrors","apierror","showLoader","loginType","showHeader","loginForm","group","email","compose","required","password","type","valid","formData","value","toLowerCase","remember_me","login","subscribe","response","success","resetForm","user","data","User","setAuth","is_superuser","purgeCompany","snapshot","queryParamMap","get","nextURL","navigateByUrl","error","selector","template","routes","path","component","title","LoginModule","declarations","imports","forChild","providers"],"mappings":"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","file":"auth-login-login-module-es5.js","sourcesContent":["export default \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"auth-box private-card\\\">\\r\\n    <div class=\\\"auth-logo\\\">\\r\\n      <h1 class=\\\"text-primary\\\">WMS</h1>\\r\\n    </div>\\r\\n    <div class=\\\"auth-heading\\\">\\r\\n      <h1 class=\\\"heading\\\">Let's Get Started</h1>\\r\\n      <p>Hi! Please enter your login information below to send submissions as contacts.</p>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"formErrors.apierror\\\" class=\\\"alert alert-danger alert-dismissible\\\">\\r\\n      <a class=\\\"close\\\" (click)=\\\"removeError()\\\" data-dismiss=\\\"alert\\\" aria-label=\\\"close\\\">&times;</a>\\r\\n      <span [innerHTML]=\\\"formErrors.apierror\\\"> </span>\\r\\n    </div>\\r\\n    <form *ngIf=\\\"loginType == 'email'\\\" class=\\\"form-signin\\\" [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\r\\n      <div class=\\\"form-group field-loginform-email required\\\">\\r\\n        <label class=\\\"control-label\\\">Email Address</label>\\r\\n        <input type=\\\"text\\\" [formControl]=\\\"loginForm.controls['email']\\\" class=\\\"form-control input-lg\\\"\\r\\n          placeholder=\\\"Email ID\\\">\\r\\n      </div>\\r\\n      <div class=\\\"form-group field-loginform-password required\\\">\\r\\n        <label class=\\\"control-label\\\">Password</label>\\r\\n        <input type=\\\"password\\\" [formControl]=\\\"loginForm.controls['password']\\\" class=\\\"form-control input-lg\\\"\\r\\n          placeholder=\\\"Password\\\">\\r\\n      </div>\\r\\n      <div class=\\\"\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <div class=\\\"form-check form-check-inline mr-0\\\">\\r\\n            <div class=\\\"checkbox-container\\\">\\r\\n              <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" value=\\\"all\\\">\\r\\n              <span class=\\\"checkmark\\\"></span>\\r\\n            </div>\\r\\n            <label class=\\\"checkbox-set mb-0 ml-1\\\"> Remember Me</label>\\r\\n          </div>\\r\\n\\r\\n          <a routerLink=\\\"/forgot-password\\\" class=\\\"pull-right\\\"><small>Forgot\\r\\n              password?</small></a>\\r\\n        </div>\\r\\n      </div>\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-lg btn-block mt-4\\\"\\r\\n        [ngClass]=\\\"{'qt-loader qt-loader-mini qt-loader-left': showLoader}\\\" [disabled]=\\\"showLoader\\\">\\r\\n        Log In\\r\\n      </button>\\r\\n      <p class=\\\"text-muted mt-4 m-bottom-0 text-center\\\">Don't have an account yet?<a routerLink=\\\"/\\\"> Sign\\r\\n          Up</a></p>\\r\\n    </form>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ConfigService } from 'src/app/service/config.service';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from 'src/app/service/auth.service';\r\nimport { validateEmailFormControl, CommonFunction } from 'src/app/common';\r\nimport { DataService } from 'src/app/service/data.service';\r\nimport { CommonService } from 'src/app/service/common.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html'\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n\r\n  loginForm: FormGroup;\r\n  formErrors = {\r\n    apierror: null\r\n  };\r\n  showLoader = false;\r\n  isAuthenticated: boolean;\r\n  isCompanySelected: boolean;\r\n  loginType = 'email'\r\n  constructor(\r\n    private config: ConfigService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private authService: AuthService,\r\n    private commonService: CommonService,\r\n    private fBuilder: FormBuilder,\r\n    private dataService: DataService\r\n  ) {\r\n    this.config.config = { showHeader: false };\r\n    this.loginForm = this.fBuilder.group({\r\n      email: [null, Validators.compose([Validators.required, validateEmailFormControl])],\r\n      password: [null, Validators.compose([Validators.required])], // validatePassword\r\n    });\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n  changeLoginType(type) {\r\n    this.loginType = type;\r\n  }\r\n  getLoginType(type) {\r\n    this.loginType = type;\r\n  }\r\n  submitForm(): void {\r\n    if (this.loginForm.valid) {\r\n      this.showLoader = true;\r\n      const formData = {\r\n        email: this.loginForm.value.email.toLowerCase(),\r\n        password: this.loginForm.value.password,\r\n        remember_me: this.loginForm.value.remember_me,\r\n      };\r\n      this.authService.login(formData).subscribe((response) => {\r\n        this.showLoader = false;\r\n        if (response.success) {\r\n          CommonFunction.resetForm(this.loginForm);\r\n          const user = response.data.User;\r\n          this.dataService.setAuth(response.data);\r\n          if (user.is_superuser) {\r\n            this.dataService.purgeCompany();\r\n          }\r\n          this.config.config = { showHeader: true };\r\n          this.activatedRoute.snapshot.queryParamMap.get('next');\r\n          const nextURL = this.activatedRoute.snapshot.queryParamMap.get('next') ?\r\n            this.activatedRoute.snapshot.queryParamMap.get('next') : '/dashboard';\r\n          this.router.navigateByUrl(nextURL);\r\n        } else {\r\n          this.formErrors.apierror = `* ${response.error[0]}`;\r\n        }\r\n      }, (error) => {\r\n        this.formErrors.apierror = `* Server Error`;\r\n        this.showLoader = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  removeError(){\r\n    this.formErrors.apierror=null;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './login.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthService } from 'src/app/service/auth.service';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FormValidationModule } from 'src/app/shared/form-validation/form-validation.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n    data: { title: 'login' }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FormValidationModule,\r\n    SharedModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  providers: [\r\n    AuthService\r\n  ]\r\n})\r\nexport class LoginModule { }\r\n"]}